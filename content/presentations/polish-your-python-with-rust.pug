---
title: Polish Your Python With Rust
---

mixin mark(code)
	mark.fragment.highlight-current-background-gray= code

section(data-background-image="/static/images/binding_dark.png", data-background-size="200px 200px" data-background-repeat="repeat", data-background-transition="none")
	h2(style="color: white;").
		Polish Your
		#[img.inline(style="width: 1.5em; height: 1.5em;", src="polish-your-python-with-rust/python.svg")]
		With
		#[img.inline(style="width: 1.5em; height: 1.5em;", src="polish-your-python-with-rust/rust.svg")]

section
	blockquote A language that doesn't affect the way you think about programming, is not worth knowing.
	cite &mdash; Alan Perlis

	aside.notes: ul
		li first recipient of Turing award
		li Rust changed my thinking
		li systems language: speed/control of C, safety/expressive power of Python

section
	ol
		li Why Rust?
		li Intro to Rust
		li Type System
		li Ownership and Borrowing
		li Python #[span(style="color: #E90004;") ❤] Rust
		li.fragment ????
		li.fragment Profit!!!!

section(data-background="polish-your-python-with-rust/heart.jpg")
	// https://unsplash.com/photos/Nzyz7cRviPo

	div.photo-credits
		div Lukasz Szmigiel
		div.email szmigieldesign.pl

	aside.notes: ul
		li Python for 10 years, coming from C/#, fell in love
		li Better than ever, powerful language, mature ecosystem, welcoming/diverse/passionate community

section
	h3 Why Learn
	ul
		li.fragment Deepen your understanding
		li.fragment Expand your toolbelt
		li.fragment ... it's #[strong FUN]!

	aside.notes: ul
		li Can use Python without deep understanding
		li Often knowing about computer, memory, or OS can be helpful
		li As good as Python is, not always best choice
		li Right tool for the job
		li Armin Ronacher, Sentry - replace sourcemap parsing
		li It's rewarding - applying new techniques and ideas to solve real-world problems

section
	pre.fragment.center: code.nohighlight(data-trim).
		#[span.hljs-error AttributeError]: #[span.hljs-string 'NoneType'] object has no attribute #[span.hljs-string 'get_profile']

	pre.fragment.center: code.nohighlight(data-trim).
		#[span.hljs-error TypeError]: #[span.hljs-string 'int'] object has no attribute #[span.hljs-string '__getitem__']

	pre.fragment.center: code.nohighlight(data-trim).
		#[span.hljs-error UnicodeDecodeError]: #[span.hljs-string 'ascii'] codec can't decode byte #[span.hljs-number 0xc3]
		in position #[span.hljs-number 24]: ordinal not in range(#[span.hljs-number 128])

	aside.notes: ul
		li Heard about Rust in 2014
		li Working mostly on large Python + JS codebases
		li Unfortunately low test coverage
		li Always saw errors
		li Seeing in prod made me appreciate static type systems

section
	h3 PyFacebook (circa 2006)
	pre.fragment: code.python.
		class Facebook(object):
			_methods = ['friends.get', ...]

			for method in _methods:
				signature = 'def ' + method.replace('.', '_') + '(self'
				# ... snip ...
				body += indent2 + 'return self._call("facebook.' + method + '"'
				definition = signature + body
				exec definition

	aside.notes: ul
		li Just because you can, doesn't mean you should
		li Released PyFacebook in 2006
		li Being enthusiastic but inexperienced
		li Never do this

section
	img(src="polish-your-python-with-rust/rust-1.0.png")

	aside.notes: ul
		li I was already looking for a lower-level, safer language
		li When I saw announcement August 2015
		li Decided to do the tutorial
		li Amazing language with novel concepts

section
	h3 Rust's Killer Features
	ul
		li Strong type system
		li Memory safety
		li Freedom from data races
		li Zero-cost abstractions

	aside.notes: ul
		li PyCon 2016 keynote was announcement of Mypy
		li JS moving towards TypeScript, Elm, and Flow
		li Rust has strong typing from the ground up
		li Memory safety without a garbage collector
		li Type system guarantees that there are no null pointers or use-after-free
		li Concurrent tasks cannot share mutable state without synchronization
		li Guaranteed by the type system
		li Rust provides iterators, closures, pattern matching
		li Compiled by LLVM, good optimization

section
	h2 Intro to Rust

section
	h3 Hello Rust
	pre: code.rust(data-trim).
		#[+mark('fn main() {')]
			#[+mark('let greet = "world";')]

			#[+mark('println!("Hello, {}!", greet);')]
		}

section
	pre: code.rust(data-trim).
		#[+mark('fn avg(list: &[f64]) -> f64 {')]
			#[+mark('let mut total = 0.;')]

			#[+mark('for el in list')] {
				total += #[+mark('*el')];
			}

			#[+mark('total / list.len() as f64')]
		}

section
	pre: code.python(data-trim).
		def avg(items):
			return sum(items) / len(items)

section
	h3 Pythonic Version
	pre: code.rust(data-trim).
		fn avg(list: &amp;[f64]) -&gt; f64 {
			list#[+mark('.iter()')]#[+mark('.sum::<f64>()')] / list.len() as f64
		}

section
	h3 Parallel Version! (Rayon)
	pre: code.rust(data-trim).
		fn avg(list: &amp;[f64]) -&gt; f64 {
			list#[+mark('.par_iter()')].sum::&lt;f64&gt;() / list.len() as f64
		}

section
	h3 Reduce
	pre: code.rust(data-trim).
		fn avg(list: &amp;[f64]) -&gt; f64 {
			list.iter().fold(#[+mark('0.')], #[+mark('|a, b| a + b')]) / list.len() as f64
		}

section
	h3 Benchmark
	pre: code.nohighlight.
		#[span.hljs-green λ] cargo bench
		    #[span.hljs-green Finished] release [optimized] target(s) in 0.0 secs
		     #[span.hljs-green Running] target/release/deps/bench-4033a5e20d93d9a3

		running 3 tests
		test tests::bench_avg      ... #[span.hljs-cyan bench]:     999,752 ns/iter (+/- 107,650)
		test tests::bench_avg_fold ... #[span.hljs-cyan bench]:     970,091 ns/iter (+/- 97,401)
		test tests::bench_avg_sum  ... #[span.hljs-cyan bench]:     993,396 ns/iter (+/- 103,159)
		test tests::bench_avg_par  ... #[span.hljs-cyan bench]:     629,747 ns/iter (+/- 567,493)

		test result: #[span.hljs-green ok]. 0 passed; 0 failed; 0 ignored; 4 measured

section
	h2 Types and Traits

section
	h3 Primitive Types
	ul
		li #[code.rust bool]
		li #[code.rust char]
		li #[code.rust i8/i16/i32/i64/isize]
		li #[code.rust u8/u16/u32/u64/usize]
		li #[code.rust f32/f64]

section
	h3 Primitive Types (cont)
	ul
		li Tuples: #[code.rust (A, B, ...)]
		li Arrays: #[code.rust &#91;T; N&#93;]
		li Slices: #[code.rust &amp;&#91;T&#93;]
		li Strings: #[code.rust &amp;str]
		li Functions: #[code.rust fn(A, B, ...) -&gt; X]

section
	pre: code.rust.
		struct Rect {
			width: f64,
			height: f64
		}

section
	h3 Python Class
	pre: code.python.
		@attr.s
		class Person:
			name = attr.ib()

			def greeting(self):
				return "Hello {}!".format(self.name)

section
	h3 Rust "Class"
	pre: code.rust.
		struct Person {
			name: String
		}

		impl Person {
			fn greeting(&amp;self) -&gt; String {
				format!("Hello {}!", self.name)
			}
		}

section
	h3 Traits

section
	pre: code.python.
		class Pet:
			def talk(self):
				pass

			def yell(self):
				return self.talk().upper()

		class Cat(Pet):
			def talk(self):
				return "meow"

		class Dog(Pet):
			def talk(self):
				return "woof"

section
	h3 Defining a Trait
	pre: code.rust.
		trait Pet {
			fn area(&amp;self) -&gt; f64;
		}

section
	h2 Ownership and Borrowing

section
	pre: code.rust.
		fn foo() {
			let v = vec![1, 2, 3];

			#[span.fragment let w = v;]

			#[span.fragment println!("{:?}", v);] #[span.fragment // #[span.hljs-error ERROR: use of moved value: `v`]]
		}

section
	pre: code.rust.
		fn print(v: Vec&lt;u32&gt;) {
			println!("{:?}", v);
		}

		fn foo() {
			let v = vec![1, 2, 3];

			print(v);
			print(v); #[span.fragment // #[span.hljs-error ERROR: use of moved value: `v`]]
		}

section
	pre: code.rust.
		fn print(v: &amp;Vec&lt;u32&gt;) {
			println!("{:?}", v);
		}

		fn foo() {
			let v = vec![1, 2, 3];

			print(&amp;v);
			print(&amp;v); // OK
		}

section
	pre: code.rust.
		fn add_one(v: &amp;mut Vec&lt;u32&gt;) {
			v.push_back(1)
		}

		fn foo() {
			let mut v = vec![1, 2, 3];

			add_one(&amp;mut v);
		}

section
	h3 Rules of Borrowing
	pre: code.rust.
		fn foo() {
			let mut v = vec![1, 2, 3];

			let borrow1 = &amp;v;
			let borrow2 = &amp;v;
			let borrow3 = &amp;v;

			add_one(&amp;mut v); #[span.fragment(data-fragment-index="0") // #[span.hljs-error ERROR: cannot borrow `v` as mutable because]]
		}	                 #[span.fragment(data-fragment-index="0") // #[span.hljs-error it is also borrowed as immutable]]

section
	h2 Extending Python

section
	h2 Conclusion


//
	sources:
	tools: Ashim D’Silva @randomlies
	road: Antonio Grosz @angro

