---
title: Polish Your Python With Rust
---

section(data-background-image="/static/images/binding_dark.png", data-background-size="200px 200px" data-background-repeat="repeat", data-background-transition="slide")
	h2(style="color: white;").
		Polish Your
		#[img.inline(style="width: 1.5em; height: 1.5em;", src="polish-your-python-with-rust/python.svg")]
		With
		#[img.inline(style="width: 1.5em; height: 1.5em;", src="polish-your-python-with-rust/rust.svg")]

section
	blockquote A language that doesn't affect the way you think about programming, is not worth knowing.
	cite &mdash; Alan Perlis

section
	pre: code.python.
		class Facebook(object):
			_methods = ['friends.get', ...]

			for method in _methods:
				signature = 'def ' + method.replace('.', '_') + '(self'
				# ... snip ...
				body += indent2 + 'return self._call("facebook.' + method + '"'
				definition = signature + body
				exec definition


section
	h2 About Rust

section
	img(src="polish-your-python-with-rust/rust-1.0.png")

section
	h2 Rust's Killer Features
	ul
		li Strong type system
		li Memory safe
		li Zero-cost abstractions

section
	pre: code.rust(data-trim).
		#[mark.fragment.highlight-current-background-gray fn main() {]
			#[mark.fragment.highlight-current-background-gray let greet = "world";]

			#[mark.fragment.highlight-current-background-gray println!("Hello, {}!", greet);]
		}

section
	pre: code.shell.
		λ rustc hello.rs
		λ ./hello
		Hello, world!

section
	h2 Types and Traits

section
	h2 Primitive Types
	ul
		li #[code.rust bool]
		li #[code.rust char]
		li #[code.rust i8/i16/i32/i64/isize]
		li #[code.rust u8/u16/u32/u64/usize]
		li #[code.rust f32/f64]

section
	h2 Primitive Types (cont)
	ul
		li Tuples: #[code.rust (A, B, ...)]
		li Arrays: #[code.rust &#91;T; N&#93;]
		li Slices: #[code.rust &amp;&#91;T&#93;]
		li Strings: #[code.rust &amp;str]
		li Functions: #[code.rust fn(A, B, ...) -&gt; X]

section
	pre: code.rust.
		#[mark.fragment.highlight-current-background-gray struct Rect {]
			#[mark.fragment.highlight-current-background-gray width: f64,]
			#[mark.fragment.highlight-current-background-gray height: f64]
		}

		let r = Rect { width: 3.0, height: 5.0 };

section
	h2 Traits

section
	pre: code.python.
		@attr.s
		class Person:
			name = attr.ib()

			def greeting(self):
				return "Hello {}!".format(self.name)

section
	pre: code.rust.
		struct Person {
			name: String
		}

		impl Person {
			fn greeting(&amp;self) -&gt; String {
				format!("Hello {}!", self.name)
			}
		}

section
	pre: code.python.
		class Pet:
			def talk(self):
				pass

			def yell(self):
				return self.talk().upper()

		class Cat(Pet):
			def talk(self):
				return "meow"

		class Dog(Pet):
			def talk(self):
				return "woof"

section
	h2 Defining a Trait
	pre: code.rust.
		trait Shape {
			fn area(&amp;self) -&gt; f64;
		}

section
	h2 Implementing Traits
	pre: code.rust.
		struct Rect {
			width: f64,
			height: f64
		}

		impl Shape for Rect {
			fn area(&amp;self) -&gt; f64 {
				self.width * self.height
			}
		}

		struct Circle {
			radius: f64
		}

		impl Shape for Circle {
			fn area(&amp;self) -&gt; f64 {
				std::f64::consts::PI * self.radius * self.radius
			}
		}

section
	h2 Using Traits
	pre: code.rust.
		let r = Rect { width: 3.0, height: 5.0 };

		r.area(); // Shape must be imported!

		Shape::area(&amp;r);

section
	h2 Ownership and Borrowing



section
	h2 Extending Python


//
	sources:
	tools: Ashim D’Silva @randomlies
	road: Antonio Grosz @angro

