---
title: Rust Traits
---

section
	h2 <strong>Types</strong> and <strong>Traits</strong>
section
	h2 Why Strong Typing?
	pre: code.c.
		static int
		check_if_ca (gnutls_x509_crt_t cert, gnutls_x509_crt_t issuer,
		             unsigned int flags) {
		    int result =
		        _gnutls_x509_get_signed_data (issuer-&gt;cert, "tbsCertificate",
		                                      &amp;issuer_signed_data);
		    if (result &lt; 0) {
		        gnutls_assert ();
		        goto cleanup;
		    }

		    // more checks...

		    result = 0;

		cleanup:
		    // cleanup code...
		    return result;
		}
section
	pre: code.c.
		if (check_if_ca (...)) {
			// oops!
		}
section
	pre: code.javascript.
		[] == ![] // -&gt; true
		new Boolean(false) == !(new Boolean(false)) // -&gt; true
section
	h2 Primitive Types
	ul
		li #[code.rust bool]
		li #[code.rust char]
		li #[code.rust i8/i16/i32/i64/isize]
		li #[code.rust u8/u16/u32/u64/usize]
		li #[code.rust f32/f64]
section
	h2 Primitive Types (cont)
	ul
		li Tuples: #[code.rust (A, B, ...)]
		li Arrays: #[code.rust [T; N]]
		li Slices: #[code.rust &amp;[T]]
		li Strings: #[code.rust &amp;str]
		li Functions: #[code.rust fn(A, B, ...) -&gt; X]
section
	h2 Enums
	pre: code.rust.
		enum Medal {
			Gold,
			Silver,
			Bronze
		}

		let phelps = Medal::Gold;
section
	h2 Enums
	pre: code.rust.
		enum Medal {
			Gold,
			Silver,
			Bronze,
			Finalist(u8)
		}

		let fourth = Medal::Finalist(4);
section
	h2 Structs
	pre: code.rust.
		struct Rect {
			width: f64,
			height: f64
		}

		let r = Rect { width: 3.0, height: 5.0 };

		let r2 = Rect { width: 5.0, .. r };
section
	h2 Tuple Structs
	pre: code.rust.
		struct RGB(u8, u8, u8);

		let color = RGB(255, 255, 0);

		println!("red: {}", color.0);
section
	h2 Inherent #[code.rust impl]s
	pre: code.rust.
		struct Rect {
			width: f64,
			height: f64
		}

		impl Rect {
			fn area(&amp;self) -&gt; f64 {
				self.width * self.height
			}
		}

		fn print_area(r: &amp;Rect) {
			println!("Area: {}", r.area());
		}
section
	h2 Inherent #[code.rust impl]s (cont)
	pre: code.rust.
		struct Rect { ... }

		impl Rect {
			fn double(&amp;mut self) {
				self.width *= 2;
				self.height *= 2;
			}
		}

		fn main() {
			let mut r = Rect { width: 3.0, height: 5.0 }
			println!("Area: {}", r.area());
		}
section
	h2 Traits
section
	h2 What Are Traits?
	ul
		li A collection of methods
		li Used as bounds for generic functions
		li Markers for specific functionality
		li Operator overloading
		li Most similar to Haskell typeclasses (or interfaces in C#/Java)
		li Can be generic
		li Trait Objects
section
	h2 Defining a Trait
	pre: code.rust.
		trait Shape {
			fn area(&amp;self) -&gt; f64;
		}
section
	h2 Implementing Traits
	pre: code.rust.
		struct Rect {
			width: f64,
			height: f64
		}

		impl Shape for Rect {
			fn area(&amp;self) -&gt; f64 {
				self.width * self.height
			}
		}

		struct Circle {
			radius: f64
		}

		impl Shape for Circle {
			fn area(&amp;self) -&gt; f64 {
				std::f64::consts::PI * self.radius * self.radius
			}
		}
section
	h2 Using Traits
	pre: code.rust.
		let r = Rect { width: 3.0, height: 5.0 };

		r.area(); // Shape must be imported!

		Shape::area(&amp;r);
section
	h2 Trait Bounds
	pre: code.rust.
		fn print_area&lt;T: Shape&gt;(shape: &amp;T) {
			println!("{}", shape.area());
		}

		fn print_shape_and_area&lt;T: Shape + Display&gt;(shape: &amp;T) {
			println!("Area of {}: {}", shape, shape.area());
		}
section
	h2 Trait Bounds (cont)
	pre: code.rust.
		struct Scene&lt;T&gt; where T: Shape {
			shapes: Vec&lt;T&gt;;
		}
section
	h2 Trait Objects
	pre: code.rust.
		fn print_area(shape: &amp;Shape) {
			println!("{}", shape.area());
		}
section
	h2 Type Parameters
	pre: code.rust.
		trait Add&lt;Rhs=Self&gt; {
			type Output;

			fn add(self, rhs: Rhs) -&gt; Self::Output;
		}

		struct Point(f64, f64);

		impl Add&lt;Point&gt; for Point {
			type Output = Self;

			fn add(self, other: Point) -&gt; Point {
				Point(self.0 + other.0, self.1 + other.1)
			}
		}
section
	h2 Type Parameters (cont)
	pre: code.rust.
		trait Graph&lt;V, E&gt; { }

		fn adjacent&lt;V, E, G: Graph&lt;V, E&gt;&gt;(g: &amp;G, v: &amp;V, e: &amp;E) -&gt; bool { }
section
	h2 Type Parameters (cont)
	pre: code.rust.
		trait Graph {
			type V;
			type E;
		}

		fn adjacent&lt;G: Graph&gt;(g: &amp;G, v: &amp;G::V, e: &amp;G::E) -&gt; bool { }
section
	h2 Default Methods
	pre: code.rust.
		trait Name {
			fn full_name(&amp;self) -&gt; &amp;str;

			fn first_name(&amp;self) -&gt; &amp;str {
				self.full_name().split_whitespace().next().unwrap()
			}
		}

		struct Person&lt;'a&gt;(&amp;'a str);

		impl&lt;'a&gt; Name for Person&lt;'a&gt; {
			fn full_name(&amp;self) -&gt; &amp;str { self.0 }
		}
section
	h2 Trait Inheritance
	pre: code.rust.
		trait Key : Hash + Eq + Clone {
			...
		}
section
	h2 Specialization
	pre: code.rust.
		\#![feature(specialization)]

		trait Print {
			fn print(&amp;self);
		}

		impl&lt;T: Display&gt; Print for T {
			default fn print(&amp;self) {
				println!("{}", self);
			}
		}

		impl Print for i32 {
			fn print(&amp;self) {
				println!("printing i32: {}", self);
			}
		}
section
	h2 The Future
	ul
		li Abstract return types (aka #[code impl Trait])
		li Higher-kinded types
		li Virtual structs for object hierarchies
section
	h2 Thank You!
	ul
		li The <strong>Rust Book</strong>: https://doc.rust-lang.org/book/
		li <strong>Online Playpen</strong>: https://play.rust-lang.org/
section
	h2 WiFi: MonkeyGuest<br/><strong>Welcome2thejungle</strong>
